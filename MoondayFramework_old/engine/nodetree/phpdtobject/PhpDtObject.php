<?php/*** @package PhpDtObject* @author Joshua Abbott, WiseGene Project (NKommunikation)* @copyright (C) 2006 NKommunikation. All Rights Reserved.* @desc * @uses* @example* @files*/if( !array_key_exists( 'total_query_time', $GLOBALS ) ) { $GLOBALS['total_query_time'] = 0; }if( !array_key_exists( 'total_queries', $GLOBALS ) ) { $GLOBALS['total_queries'] = array(); }if( !array_key_exists( 'debug_queries', $GLOBALS ) ) { $GLOBALS['debug_queries'] = true; }if( !array_key_exists( 'debug_queries_only_relevant', $GLOBALS ) ) { $GLOBALS['debug_queries_only_relevant'] = true; }include_once( 'PhpDtObject_dsn.php' );class PhpDtObject {	/**	 * Number of selected rows after last get_many method	 * @var integer	 */	var $iLastSelectNumRows;	/**	 * Number of affected rows on delete and update	 * @var integer	 */	 var $iAffectedRowsNum;	/**	 * Id from last insert	 * @var integer	 */	var $iLastInsertId;	/**	 * Current row number on iterate method	 * @var integer	 */	var $iCurrentRowNum;	/**	 * Current table row id number. Variable needed for update and insert on save method	 * @var integer	 */	var $iCurrentId;	/**	 * Target table where to get results	 * @var integer	 */	var $sTargetTable;	/**	 * Database source connection string / name	 * phptype://user:pass@host:port/database	 * @var string	 */	var $sDsn;	/**	 * Boolean row handler. Used on iterate method. Perhaps static inside function?	 * @var string	 */	var $bEven;	/**	 * Temporary index table, that is used to save field values after queries	 * @var array	 */	var $aTemporaryIndex;	/**	 * Index array, that contains all orginal table field names	 * @var array	 */	var $aTableIndex;	/**	 * Tracks all fields sets. On update and insert query	 * only these fields are used to produce more efficient	 * clauses	 * @var array	 */	var $aUpdatedFields;	/**	 * Masked fields array is used to limit fields that are returned from	 * database query	 * @var array	 */	var $aSelectMask;	/**	 * Generated database object	 * @var object	 */	var $oDb;		/**	 * Constructor	 * 	 * @param string $sTargetTable	 * @param string $sDsn	 * @access public	 */	function PhpDtObject( $sTargetTable, $sDsn ) {				$this->sTargetTable 		= $sTargetTable;		$this->sDsn 				= $sDsn;	 	$this->iLastSelectNumRows	= 0;		$this->iAffectedRowsNum		= 0;		$this->iLastInsertId		= 0;		$this->iCurrentRowNum		= 0;		$this->iCurrentId			= 0;		$this->aTemporaryIndex 		= array();		$this->aUpdatedFields 		= array();		$this->aSelectMask 			= array();		$this->bEven				= false;		$this->oDb					= $this->_connect();		$this->aTableIndex 			= $this->oDb->aTableIndex;	}		/************************************************	 **                PUBLIC METHODS	 ***********************************************/			/**	 * Is object connected to database	 * @return boolean	 * @access public	 */	function is_connected() {		return $this->bIsConnected;	}		/**	 * Simple primary key and id initialization	 * @param integer $iId	 * @return boolean	 * @access public	 */	function init( $iId ) {		return $this->init_by_key( $this->oDb->sPrimaryKey, $iId );	}	 /**	  * Simple key value pair initialization	  * Returns only first occurence	  * @param integer $sKey	  * @param integer $mVal	  * @return boolean	  * @access public	  */	function init_by_key( $sKey, $mVal ) {		$aParams['where'] = "$sKey = '$mVal'";		$aParams['limit'] = 1;		$this->iLastSelectNumRows = $this->oDb->select( $aParams, $this->_get_columns() );		if( $this->iLastSelectNumRows > 0 ) {			$this->_set_key_val( $this->oDb->fetch_assoc() );			return true;		} else {			//trigger_error( 'Cannot initialize object with key ('.$sKey.') and value ('.$mVal.').' );			return false;		}	}		 /**	  * Short form of get value method	  * @param integer $sKey	  * @return mixed	  * @access public	  * @see get_value( $sKey )	  */	function gv( $sKey ) { return $this->get_value( $sKey ); }		 /**	  * Get value from initialized object with key	  * Gives null if there is no value with key	  * @param integer $sKey	  * @return mixed	  * @access public	  */	function get_value( $sKey, $sOptionalValue = null ) {		if( array_key_exists( $sKey, $this->aTemporaryIndex ) ) {			return $this->aTemporaryIndex[$sKey];		} else {			//trigger_error( __CLASS__.': Key ('.$sKey.') was not found from temporary index after retriving table ('.$this->sTargetTable.').', E_USER_NOTICE );			return $sOptionalValue;		}	}		function field_exists( $sKey ) { return array_key_exists( $sKey, $this->aTemporaryIndex ); }	 /**	  * Get current initialized object row fields in normal associative array	  * @return array	  * @access public	  */	function get_index() {		return $this->aTemporaryIndex;	}		/** 	 * Returns rows number found from the database table (or false on failure)	 * and sets up the object for iterating through selected rows	 * See supported parameters from inherited database access class 	 * like PhpDtObject_mysql.php	 * @param $aParams	 * @return mixed	 * @access public	 */	function get_many( $aParams = array() ) {		return $this->iLastSelectNumRows = $this->oDb->select( $aParams, $this->_get_columns() );	}	/** 	 * Iterates through last select result set	 * Sets also current row num and changes boolean even value	 * @return boolean	 * @access public	 */	function iterate() {		$arr = $this->oDb->fetch_assoc();		if( $arr ) {			$this->_set_key_val( $arr );			$this->iCurrentRowNum++;			$this->bEven = !$this->bEven;			return true;		} else {			return false;		}	}		/** 	 * Returns even true or false when used iterate to fecth rows	 * @return boolean	 * @access public	 */	function is_even() {		return $this->bEven;	}	/** 	 * Returns true, if current row numer is last row number. use with iterate	 * @return boolean	 * @access public	 */	function is_last() {		return $this->iCurrentRowNum >= $this->iLastSelectNumRows;	}		/**	 * Perform normal query. Use iterate to go thgought results	 * Return boolean ture or false if query failed or succeed	 * @param string $sQuery	 * @return mixed resultset or null if query failed	 * @access public	 */	function query( $sQuery ) {		return $this->oDb->query( $sQuery );	}		/**	 * Return total time summed up from queries in current object.	 * To get total queries handled by all phpdtobjects in application 	 * use $GLOBALS['total_query_time']!	 * @return integer	 * @access public	 */	function get_total_query_time() {		return $this->oDb->iTotalQueryTime;	}	/**	 * Free resultset	 * @return void	 * @access public	 */	function free_result() {		$this->oDb->free_result();	}	/**	 * Disconnect database	 * @return void	 * @access public	 */	function unlink() {		$this->oDb->unlink();	}	/*************************************	** 				MODIFIERS	*************************************/	/** 	 * Short form of get value method	 * @param string $key	 * @param string $val	 * @return boolean	 * @access public	 * @see set_value( $key, $val )	 */	function sv( $sKey, $sVal ) { return $this->set_value( $sKey, $sVal ); }		/** 	 * Set single value. 	 * Save method must be called after setValue methods to save values on database.	 * Uses updated field array to determine, which fields were updated, so that	 * not all field are builded on sql query.	 * @param string $sKey	 * @param string $val	 * @return boolean	 * @access public	 */	function set_value( $sKey, $sVal ) {		if( array_key_exists( $sKey, $this->aTableIndex ) ) {			$this->aTemporaryIndex[$sKey] = $sVal;			$this->aUpdatedFields[$sKey] = $sVal;			return true;		} else {			//trigger_error( 'Key ('.$sKey.') was not found from the table ('.$this->sTargetTable.').', E_USER_NOTICE );			return false;		}	}	/** 	 * set multiple values from associative array. useful when	 * inserting and updating REQUEST variables than comes from	 * the form etc. only the fields, that are schematized on	 * database table, are updated!	 * @param array $aParams	 * @access public	 */	function assign_array( $aParams ) {		if( !empty( $aParams ) && gettype( $aParams ) == 'array' ) {			foreach( $aParams as $sKey => $mVal ) {				if( array_key_exists( $sKey, $this->aTableIndex ) ) {					$this->aUpdatedFields[$sKey] = $mVal;				}			}		}	}	/** 	 * Database insert and update method	 * @param array $aParams	 * @return integer last insert id or last affected rows number	 * @access public	 */	function save( $aParams = array() ) {		$iId = $this->iCurrentId;		if( $iId < 1 ) {			return $this->iLastInsertId = $this->oDb->insert( $aParams, $this->aUpdatedFields );		} else {			// if where and limit are not specified, then we update single rows with current primary key and id			$aParams['where'] = array_key_exists( 'where', $aParams ) ? $aParams['where'] : $this->oDb->sPrimaryKey." = '$iId'";			$aParams['limit'] = array_key_exists( 'limit', $aParams ) ? $aParams['limit'] : 1;			return $this->iAffectedRowsNum = $this->oDb->update( $aParams, $this->aUpdatedFields );		}	}	/**	 * Database table row deleting. See mysql documentation for	 * supported parameters	 * @return boolean	 * @param array $aParams	 * @see http://dev.mysql.com/doc/mysql/en/delete.html	 * @access public	 */ 	function delete( $aParams = array() ) {		// if parameters are not included, then method tries to delete the current object row!		if( !array_key_exists( 'where', $aParams ) ) {			$iId = $this->iCurrentId;			if( $iId < 1 ) {				trigger_error( 'Delete action could not be completed. Either primary key is missing or id value is zero' );				return false;			}			$aParams['where'] = $this->oDb->sPrimaryKey." = '$iId'";			$aParams['limit'] = 1;		}		$iRows = $this->oDb->delete( $aParams );		if( $iRows !== false ) {			$this->iAffectedRowsNum = $iRows;			return true;		} else {			return false;		}	}		/**	 * Mask is used to limit retrived field names on select. 	 * This method return current mask array	 * @return array	 * @access public	 */	function get_mask() {		return $this->aSelectMask;	}	/**	 * Mask is used to limit retrived field names on select. 	 * This method sets mask. Note, that table primary key column name is set	 * everytime automatic and therefore cant be masked off	 * @param array $aFields	 * @access public	 * @return void	 */	function set_mask( $aFields ) {		$this->aSelectMask = $aFields;	}	/**	 * Mask is used to limit retrived field names on select. 	 * This method deletes / empties current mask	 * @access public	 * @return void	 */	function clear_mask() {		$this->aSelectMask = array();			}	/**	 * Duplicate row on same table. 	 * This method return current mask array. Use without init-method!	 * @param int $iId row id to duplicate	 * @return mixed 0 failed, 1-n true	 * @access public	 * @since v 2.1	 * @todo check returned value, if insert fails, but there were inserts before this object!	 */	function duplicate( $iId ) {		$sFields 	= '';		$aFields 	= $this->_get_columns();		unset( $aFields[0] );				foreach( $aFields as $v ) { $sFields .= "`$v`, "; }		$sFields = substr( $sFields, 0, strlen( $sFields )-2 );				$sQuery = "INSERT INTO {$this->sTargetTable} ( $sFields ) SELECT $sFields FROM {$this->sTargetTable} WHERE {$this->oDb->sPrimaryKey} = $iId";		$this->query( $sQuery );		return $this->oDb->get_last_insert_id();	}	/**	 * Get rows number. 	 * 	 * If method is called without argument, then all table rows are counted	 * and integer value returned. With optional parameter it is possible	 * to make where statement to count rows with.	 * 	 * @param string $sWhere default 1	 * @return integer	 * @access public	 * @since v 2.1	 */	function get_rows_num( $sWhere = 1 ) {		$this->query( "SELECT count( {$this->oDb->sPrimaryKey} ) AS c FROM {$this->sTargetTable} WHERE $sWhere" );		$this->iterate();		return $this->gv( 'c' );	}		/************************************************	 *                PRIVATE METHODS	 ***********************************************/	/**	 * Sets temporary indes array with currently selected table field values	 * Sets also current id	 * @param array $aKeyValues	 * @access private	 */		function _set_key_val( $aKeyValues ) {		$this->aTemporaryIndex = array();		foreach( $aKeyValues as $key => $val ) {			$this->aTemporaryIndex[$key] = $val;		}		$this->iCurrentId = array_key_exists( $this->oDb->sPrimaryKey, $this->aTemporaryIndex ) ? $this->aTemporaryIndex[$this->oDb->sPrimaryKey] : 0;			}	/**	 * @return object	 * @access private	 */	function _connect() {		$aDbPrefs = PhpDtObject_dsn::parse( $this->sDsn );		$sDbClass = 'PhpDtObject_'.$aDbPrefs['phptype'];		$oDb = null;		if( $this->_include_class( $sDbClass.'.php' ) && $this->_class_exists( $sDbClass ) ) {			$oDb = new $sDbClass( $this->sTargetTable, $aDbPrefs );			$this->bIsConnected = $oDb->bIsConnected;		}		return $oDb;	}	/**	 * @return array	 * @param string $sClassName	 * @access private	 */	function _class_exists( $sClassName ) {		if( class_exists( $sClassName ) ) {			return true;		} else {			trigger_error( 'Database connection class '.$sClassName.' not found!' );			return false;		}	}	/**	 * @return boolean	 * @param string $sFileName	 * @access private	 */	function _include_class( $sFileName ) {		if( !include_once( $sFileName ) ) {			trigger_error( 'Database connection class file '.$sFileName.' not found!' );			return false;		} else {			return true;		}	}	/**	 * This private helper method is used to control which columns should be returned	 * on get_many, init and init_by_key methods ( select [columns] )	 * Table primary key column name is set automatic	 * @return array	 * @access private	 */	function _get_columns() {		if( !empty( $this->aSelectMask ) ) {			// force set id field			$aTableIndex = array_keys( $this->aTableIndex );			$aSelectMask = $this->aSelectMask;			if( !in_array( $this->oDb->sPrimaryKey, $aSelectMask ) )				$aSelectMask[] = $this->oDb->sPrimaryKey;			return array_intersect( $aTableIndex, $aSelectMask );		} else {			return array_keys( $this->aTableIndex );		}	}}?>